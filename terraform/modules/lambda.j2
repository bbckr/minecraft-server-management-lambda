{# The lambda function requires the following resources to be created prior: #}
{# S3 bucket, S3 object of the packaged zip, and IAM role with or w/o policies #}
{%- macro lambda_function(lambdaFunctionName, params, runtime) -%}
resource "aws_lambda_function" "lambda_function_{{ lambdaFunctionName }}" {
  function_name     = "{{ lambdaFunctionName }}"
  s3_bucket         = "${aws_s3_bucket.lambda_bucket.id}"
  s3_key            = "lambda_function_{{ lambdaFunctionName }}/{{ params.package.tags.version }}_{{ lambdaFunctionName }}.zip"
  handler           = "{{ params.handler }}"
  role              = "${aws_iam_role.lambda_function_role_{{ lambdaFunctionName }}.arn}"
  runtime           = "{{ runtime }}"
  source_code_hash  = "${base64sha256(file(".serverless/{{ lambdaFunctionName }}.zip"))}"
  depends_on        = ["aws_s3_bucket_object.lambda_function_zip_{{ lambdaFunctionName }}"]
}
{%- endmacro -%}

{# References the individually packaged function zip by serverless #}
{# One zip per lambda function #}
{%- macro s3_object(lambdaFunctionName, params) -%}
resource "aws_s3_bucket_object" "lambda_function_zip_{{ lambdaFunctionName }}" {
  bucket = "${aws_s3_bucket.lambda_bucket.id}"
  key    = "lambda_function_{{ lambdaFunctionName }}/{{ params.package.tags.version }}_{{ lambdaFunctionName }}.zip"
  source = ".serverless/{{ lambdaFunctionName }}.zip"
  etag   = "${md5(file(".serverless/{{ lambdaFunctionName }}.zip"))}"
}
{%- endmacro -%}
